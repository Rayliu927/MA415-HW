MR <- file
}
else{
MR <- rbind(MR, file)
}
}
MR
}
# Takes a year as input and sets data out of range as NA
clean_mr <- function(i){
a <- get_MR(get_url(i), get_filenames(i))
b <- a%>% select(YYYY, MM, DD, ATMP, WTMP)
b$ATMP <- as.numeric(b$ATMP)
b$WTMP <- as.numeric(b$WTMP)
b$ATMP[b$ATMP>100] <- NA
b$WTMP[b$WTMP>100] <- NA
b
}
# data from 1987 to 2011
for (i in c(1987:1998)){
if(i == 1987){
data1987_1998 <- clean_mr(i)
}else{
data1987_1998 <- rbind(data1987_1998, clean_mr(i))
}
}
data1987_1998$YYYY <- paste("19",data1987_1998$YYYY,sep="")
for (i in c(1999:2011)){
if(i == 1999){
data1999_2011 <- clean_mr(i)
}else{
data1999_2011 <- rbind(data1999_2011, clean_mr(i))
}
}
#data1987_2011 <- rbind(data1987_1998,data1999_2011)
# data from 2012 to 2014
Sget_url <- function(i){
urls <- str_c(url_a, i, url_b, sep = "")
urls
}
Sclean_mr <- function(i){
a <- get_MR(Sget_url(i),get_filenames(i))
b <- a%>% select(YYYY,MM,DD,hh,ATMP,WTMP)
b$ATMP <- as.numeric(b$ATMP)
b$WTMP <- as.numeric(b$WTMP)
b$ATMP[b$ATMP>100] <- NA
b$WTMP[b$WTMP>100] <- NA
b
}
data2012 <- Sclean_mr(2012)[-1,]
data2013 <- Sclean_mr(2013)[-1,]
data2014 <- Sclean_mr(2014)[-1,]
#data2012_2014 <- rbind(data2012,data2013,data2014)
# data from 2015 to 2017
for (i in c(2015:2017)){
if(i == 2015){
data2015_2017 <- clean_mr(i)
}else{
data2015_2017 <- rbind(data2015_2017, clean_mr(i))
}
}
#total data
total_data <- rbind(data1987_1998,data1999_2011,data2012,data2013,data2014,data2015_2017)
#clean the data
total_data <-total_data %>% filter(!is.na(ATMP))
total_data <-total_data %>% filter(!is.na(WTMP))
total_data$ATMP<-as.numeric(total_data$ATMP)
total_data$WTMP<-as.numeric(total_data$WTMP)
#get the time of each data
total_data$Time <-strptime(with(total_data, paste(YYYY, MM, DD, hh, sep="-")), format="%Y-%m-%d-%H")
total_data$Time <- as.Date(total_data$Time)
#get the daily data
daily<-subset(total_data,hh==12)
#get yearly average data
for (i in 1987:2017){
if(i==1987){
avg <- total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP))
}
else{
avg <- rbind(avg, total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP)))
}
}
plot_daily <-ggplot(daily, aes(x = Time)) +
geom_line(aes(y = WTMP), colour="blue", size = 0.5) +
geom_line(aes(y = ATMP), colour = "red", size = 0.5) +
ylab(label="Celsius degree") +
xlab("Year")+
ggtitle("Daily Temperature")
plot_daily
#save the file
write.csv(total_data,"data.csv",row.names = FALSE)
write.csv(avg,"data_avg.csv",row.names = FALSE)
## There is no data for station 46035 in 2013. Some temperture data is 999.
## We skip data for 2013 and ignore temperature data that is invalid.
library(tidyverse)
library(stringr)
library(zoo)
library(shiny)
library(reshape2)
library(ggplot2)
#install.packages("devtools")
library(devtools)
#install_github("easyGgplot2", "kassambara")
library(easyGgplot2)
url_a <- "http://www.ndbc.noaa.gov/view_text_file.php?filename=46035h"
url_b <- ".txt.gz&dir=data/historical/stdmet/"
years <- c(1988:2017)
urls <- str_c(url_a, years, url_b, sep = "")
filenames <- str_c("mr", years, sep = "")
N <- length(urls)
# Takes year as input and returns full url address
get_url <- function(i){
urls <- str_c(url_a, i, url_b, sep = "")
urls
}
# Takes year as input and returns filename
get_filenames <- function(i){
filenames <- str_c("mr", i, sep = "")
filenames
}
# get historical data based on url and filename
get_MR <- function(x, y){
N <- length(x)
for (i in 1:N){
suppressMessages(assign(y[i], read_table(x[i], col_names = TRUE)))
file <- get(y[i])
colnames(file)[1] <- "YYYY"
file$YYYY <- as.numeric(file$YYYY)
if(i == 1){
MR <- file
}
else{
MR <- rbind(MR, file)
}
}
MR
}
# Takes a year as input and sets data out of range as NA
clean_mr <- function(i){
a <- get_MR(get_url(i), get_filenames(i))
b <- a%>% select(YYYY, MM, DD, ATMP, WTMP)
b$ATMP <- as.numeric(b$ATMP)
b$WTMP <- as.numeric(b$WTMP)
b$ATMP[b$ATMP>100] <- NA
b$WTMP[b$WTMP>100] <- NA
b
}
# data from 1987 to 2011
for (i in c(1987:1998)){
if(i == 1987){
data1987_1998 <- clean_mr(i)
}else{
data1987_1998 <- rbind(data1987_1998, clean_mr(i))
}
}
data1987_1998$YYYY <- paste("19",data1987_1998$YYYY,sep="")
for (i in c(1999:2011)){
if(i == 1999){
data1999_2011 <- clean_mr(i)
}else{
data1999_2011 <- rbind(data1999_2011, clean_mr(i))
}
}
# data from 2012 to 2014
Sget_url <- function(i){
urls <- str_c(url_a, i, url_b, sep = "")
urls
}
Sclean_mr <- function(i){
a <- get_MR(Sget_url(i),get_filenames(i))
b <- a%>% select(YYYY,MM,DD,hh,ATMP,WTMP)
b$ATMP <- as.numeric(b$ATMP)
b$WTMP <- as.numeric(b$WTMP)
b$ATMP[b$ATMP>100] <- NA
b$WTMP[b$WTMP>100] <- NA
b
}
data2012 <- Sclean_mr(2012)[-1,]
data2013 <- Sclean_mr(2013)[-1,]
data2014 <- Sclean_mr(2014)[-1,]
# data from 2015 to 2017
for (i in c(2015:2017)){
if(i == 2015){
data2015_2017 <- clean_mr(i)
}else{
data2015_2017 <- rbind(data2015_2017, clean_mr(i))
}
}
# total data
total_data <- rbind(data1987_1998,data1999_2011,data2012,data2013,data2014,data2015_2017)
total_data <-total_data %>% filter(!is.na(ATMP))
total_data <-total_data %>% filter(!is.na(WTMP))
total_data$ATMP<-as.numeric(total_data$ATMP)
total_data$WTMP<-as.numeric(total_data$WTMP)
# get the time of each data
total_data$Time <-strptime(with(total_data, paste(YYYY, MM, DD, hh, sep="-")), format="%Y-%m-%d-%H")
total_data$Time <- as.Date(total_data$Time)
# data at noon everyday
daily<-subset(total_data,hh==12)
#get yearly average data
for (i in 1987:2017){
if(i==1987){
avg <- total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP))
}
else{
avg <- rbind(avg, total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP)))
}
}
# plot daily temperature
plot_daily <-ggplot(daily, aes(x = Time)) +
geom_line(aes(y = WTMP), colour="blue", size = 0.5) +
geom_line(aes(y = ATMP), colour = "red", size = 0.5) +
ylab(label="Celsius degree") +
xlab("Year")+
ggtitle("Daily Temperature")
plot_daily
#save the file
write.csv(total_data,"data.csv",row.names = FALSE)
write.csv(avg,"data_avg.csv",row.names = FALSE)
## There is no data for station 46035 in 2013. Some temperture data is 999.
## We skip data for 2013 and ignore temperature data that is invalid.
library(tidyverse)
library(stringr)
library(zoo)
library(shiny)
library(reshape2)
library(ggplot2)
#install.packages("devtools")
library(devtools)
#install_github("easyGgplot2", "kassambara")
library(easyGgplot2)
#1 Visualize data
url_a <- "http://www.ndbc.noaa.gov/view_text_file.php?filename=46035h"
url_b <- ".txt.gz&dir=data/historical/stdmet/"
years <- c(1988:2017)
#urls <- str_c(url_a, years, url_b, sep = "")
filenames <- str_c("mr", years, sep = "")
N <- length(urls)
# Takes year as input and returns full url address
get_url <- function(i){
urls <- str_c(url_a, i, url_b, sep = "")
urls
}
# Takes year as input and returns filename
get_filenames <- function(i){
filenames <- str_c("mr", i, sep = "")
filenames
}
# get historical data based on url and filename
get_MR <- function(x, y){
N <- length(x)
for (i in 1:N){
suppressMessages(assign(y[i], read_table(x[i], col_names = TRUE)))
file <- get(y[i])
colnames(file)[1] <- "YYYY"
file$YYYY <- as.numeric(file$YYYY)
if(i == 1){
MR <- file
}
else{
MR <- rbind(MR, file)
}
}
MR
}
# Takes year as input and sets temperature out of range as NA
clean_mr <- function(i){
a <- get_MR(get_url(i), get_filenames(i))
b <- a%>% select(YYYY, MM, DD, ATMP, WTMP)
b$ATMP <- as.numeric(b$ATMP)
b$WTMP <- as.numeric(b$WTMP)
b$ATMP[b$ATMP>100] <- NA
b$WTMP[b$WTMP>100] <- NA
b
}
# data from 1987 to 2011
for (i in c(1987:1998)){
if(i == 1987){
data1987_1998 <- clean_mr(i)
}else{
data1987_1998 <- rbind(data1987_1998, clean_mr(i))
}
}
data1987_1998$YYYY <- paste("19",data1987_1998$YYYY,sep="")
for (i in c(1999:2011)){
if(i == 1999){
data1999_2011 <- clean_mr(i)
}else{
data1999_2011 <- rbind(data1999_2011, clean_mr(i))
}
}
# data from 2012 to 2014
data2012 <- clean_mr(2012)[-1,]
data2013 <- clean_mr(2013)[-1,]
data2014 <- clean_mr(2014)[-1,]
# data from 2015 to 2017
for (i in c(2015:2017)){
if(i == 2015){
data2015_2017 <- clean_mr(i)
}else{
data2015_2017 <- rbind(data2015_2017, clean_mr(i))
}
}
# total data
total_data <- rbind(data1987_1998,data1999_2011,data2012,data2013,data2014,data2015_2017)
total_data <-total_data %>% filter(!is.na(ATMP))
total_data <-total_data %>% filter(!is.na(WTMP))
total_data$ATMP<-as.numeric(total_data$ATMP)
total_data$WTMP<-as.numeric(total_data$WTMP)
# get the time of each data
total_data$Time <-strptime(with(total_data, paste(YYYY, MM, DD, hh, sep="-")), format="%Y-%m-%d-%H")
total_data$Time <- as.Date(total_data$Time)
# get data at noon everyday
daily<-subset(total_data,hh==12)
# get yearly average data
for (i in 1987:2017){
if(i==1987){
avg <- total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP))
}
else{
avg <- rbind(avg, total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP)))
}
}
# plot daily temperature
plot_daily <-ggplot(daily, aes(x = Time)) +
geom_line(aes(y = WTMP), colour="blue", size = 0.5) +
geom_line(aes(y = ATMP), colour = "red", size = 0.5) +
ylab(label="Celsius degree") +
xlab("Year")+
ggtitle("Daily Temperature")
plot_daily
#save the file
#write.csv(total_data,"data.csv",row.names = FALSE)
#write.csv(avg,"data_avg.csv",row.names = FALSE)
#2 Explore data
#a Is there significant change of temperature between 1988 and 2017
data_1987 <- total_data %>% filter(YYYY==1987)
data_2017 <- total_data %>% filter(YYYY==2017)
#2.1 test on ATMP
t.test(data_1987$ATMP,data_2017$ATMP)
#Because p<2.2e-16 < 0.05, we tend to reject the null hypothes
#that atmp have the same mean in 1988 and 2017
#2.2 test on WTMP
t.test(data_1987$WTMP,data_2017$WTMP)
#Because p<2.2e-16 < 0.05, we tend to reject the null hypothes
#that Wtmp have the same mean in 1988 and 2017
#Thus there are significant changes in the past 30 years
#But we also want to know which direction did the atmp and wtmp move towards
#using regression line to show the direction
reg_ATMP=ggplot(daily,aes(x=Time,y=ATMP))+geom_point()+geom_smooth(method="lm")+ggtitle("reg ATMP")
reg_WTMP=ggplot(daily,aes(x=Time,y=WTMP))+geom_point()+geom_smooth(method="lm")+ggtitle("reg WTMP")
ggplot2.multiplot(reg_ATMP,reg_WTMP)
#we can see a clear upward trend of the ATMP and WTMP reg line, which indicates that thee temperature is raising!
#3.Test whether sampling affected your evaluation of temperature change
###Use hourly data to make a graph
plot_hourly <-ggplot(total_data, aes(x = Time)) +
geom_line(aes(y = WTMP), colour="green", size = 0.5) +
geom_line(aes(y = ATMP), colour = "blue", size = 0.5) +
ylab(label="Celsius degrees") +
xlab("Time")+
ggtitle("hourly temp data")
ggplot2.multiplot(plot_daily,plot_hourly)
### We can see in the above pic, they are nearly the same, but the hourly graph takes more time to run,
### Thus sampling doesn't affect our evaluation
ggplot2.multiplot(plot_daily,plot_hourly)
ggplot2.multiplot(reg_ATMP,reg_WTMP)
ggplot2.multiplot(plot_daily,plot_hourly)
plot_hourly <-ggplot(total_data, aes(x = Time)) +
geom_line(aes(y = WTMP), colour="blue", size = 0.7) +
geom_line(aes(y = ATMP), colour = "red", size = 0.7) +
ylab(label="Celsius degrees") +
xlab("Time")+
ggtitle("Hourly Temperature")
ggplot2.multiplot(plot_daily,plot_hourly)
## There is no data for station 46035 in 2013. Some temperture data is 999.
## We skip data for 2013 and ignore temperature data that is invalid.
library(tidyverse)
library(stringr)
library(zoo)
library(shiny)
library(reshape2)
library(ggplot2)
#install.packages("devtools")
library(devtools)
#install_github("easyGgplot2", "kassambara")
library(easyGgplot2)
#1 Visualize data
url_a <- "http://www.ndbc.noaa.gov/view_text_file.php?filename=46035h"
url_b <- ".txt.gz&dir=data/historical/stdmet/"
years <- c(1988:2017)
#urls <- str_c(url_a, years, url_b, sep = "")
filenames <- str_c("mr", years, sep = "")
N <- length(urls)
# Takes year as input and returns full url address
get_url <- function(i){
urls <- str_c(url_a, i, url_b, sep = "")
urls
}
# Takes year as input and returns filename
get_filenames <- function(i){
filenames <- str_c("mr", i, sep = "")
filenames
}
# get historical data based on url and filename
get_MR <- function(x, y){
N <- length(x)
for (i in 1:N){
suppressMessages(assign(y[i], read_table(x[i], col_names = TRUE)))
file <- get(y[i])
colnames(file)[1] <- "YYYY"
file$YYYY <- as.numeric(file$YYYY)
if(i == 1){
MR <- file
}
else{
MR <- rbind(MR, file)
}
}
MR
}
# Takes year as input and sets temperature out of range as NA
clean_mr <- function(i){
a <- get_MR(get_url(i), get_filenames(i))
b <- a%>% select(YYYY, MM, DD, ATMP, WTMP)
b$ATMP <- as.numeric(b$ATMP)
b$WTMP <- as.numeric(b$WTMP)
b$ATMP[b$ATMP>100] <- NA
b$WTMP[b$WTMP>100] <- NA
b
}
# data from 1987 to 2011
for (i in c(1987:1998)){
if(i == 1987){
data1987_1998 <- clean_mr(i)
}else{
data1987_1998 <- rbind(data1987_1998, clean_mr(i))
}
}
data1987_1998$YYYY <- paste("19",data1987_1998$YYYY,sep="")
for (i in c(1999:2011)){
if(i == 1999){
data1999_2011 <- clean_mr(i)
}else{
data1999_2011 <- rbind(data1999_2011, clean_mr(i))
}
}
# data from 2012 to 2014
data2012 <- clean_mr(2012)[-1,]
data2013 <- clean_mr(2013)[-1,]
data2014 <- clean_mr(2014)[-1,]
# data from 2015 to 2017
for (i in c(2015:2017)){
if(i == 2015){
data2015_2017 <- clean_mr(i)
}else{
data2015_2017 <- rbind(data2015_2017, clean_mr(i))
}
}
# total data
total_data <- rbind(data1987_1998,data1999_2011,data2012,data2013,data2014,data2015_2017)
total_data <-total_data %>% filter(!is.na(ATMP))
total_data <-total_data %>% filter(!is.na(WTMP))
total_data$ATMP<-as.numeric(total_data$ATMP)
total_data$WTMP<-as.numeric(total_data$WTMP)
# get the time of each data
total_data$Time <-strptime(with(total_data, paste(YYYY, MM, DD, hh, sep="-")), format="%Y-%m-%d-%H")
total_data$Time <- as.Date(total_data$Time)
# get data at noon everyday
daily<-subset(total_data,hh==12)
# get yearly average data
for (i in 1987:2017){
if(i==1987){
avg <- total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP))
}
else{
avg <- rbind(avg, total_data %>% filter(YYYY==i) %>% group_by(YYYY) %>% summarise(avg_atmp=mean(ATMP),avg_wtmp=mean(WTMP)))
}
}
# plot daily temperature
plot_daily <-ggplot(daily, aes(x = Time)) +
geom_line(aes(y = WTMP), colour="blue", size = 0.7) +
geom_line(aes(y = ATMP), colour = "red", size = 0.7) +
ylab(label="Celsius degree") +
xlab("Year")+
ggtitle("Daily Temperature")
plot_daily
#save the file
#write.csv(total_data,"data.csv",row.names = FALSE)
#write.csv(avg,"data_avg.csv",row.names = FALSE)
#2 Explore data
#a Is there significant change of temperature between 1988 and 2017?
data_1987 <- total_data %>% filter(YYYY==1987)
data_2017 <- total_data %>% filter(YYYY==2017)
# Compare air temperature
t.test(data_1987$ATMP,data_2017$ATMP)
# The result is p < 2.2e^16 < 0.05. Thus, we reject the null hypothesis.
# Between 1988 and 2017, air temperature has the same mean.
# Compare water temperature
t.test(data_1987$WTMP,data_2017$WTMP)
# The result is p < 2.2e^16 < 0.05. Thus, we reject the null hypothesis.
# Between 1988 and 2017, water temperature has the same mean.
# In conclusion, there is no significant change of temperature between 1988 and 2017.
#b What is trend of temperature changing?
# Use liner regression to visualize the temperature change
reg_ATMP=ggplot(daily,aes(x=Time,y=ATMP))+geom_point()+geom_smooth(method="lm")+ggtitle("Air temperature")
reg_WTMP=ggplot(daily,aes(x=Time,y=WTMP))+geom_point()+geom_smooth(method="lm")+ggtitle("Water temperature")
ggplot2.multiplot(reg_ATMP,reg_WTMP)
# In conclusion, from liner regression line, we can see the temperature is rising.
ggplot2.multiplot(reg_ATMP,reg_WTMP)
library(shiny); runApp('Desktop/MA415-HW/Assignment5/part1_shiny.R')
runApp('Desktop/MA415-HW/Assignment5/part1_shiny.R')
runApp('Desktop/MA415-HW/Assignment5/part1_shiny.R')
